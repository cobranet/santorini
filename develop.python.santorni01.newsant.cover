    1: import random
       
    2: class SantMove:
    1:     def __init__(self,who,move,build):
4093486:         self.who=who
4093486:         self.move=move
4093486:         self.build=build
    1:     def __str__(self):
 2850:         return 'Worker {} move to {} and build {}'.format(self.who,self.move,self.build)
       
    2: class NewSant:
    1:     cell_neighbors=[[1,5,6], #0
    1:                    [0,2,5,6,7], #1
    1:                    [1,3,6,7,8],  #2 
    1:                    [2,4,7,8,9], #3
    1:                    [3,8,9],  #4
       
    1:                    [0,1,6,10,11], #5
    1:                    [0,1,2,5,7,10,11,12], #6
    1:                    [1,2,3,6,8,11,12,13], #7
    1:                    [2,3,4,7,9,12,13,14], #8
    1:                    [3,4,8,13,14], #9
       
    1:                    [5,6,11,15,16], #10
    1:                    [5,6,7,10,12,15,16,17], #11
    1:                    [6,7,8,11,13,16,17,18], #12
    1:                    [7,8,9,12,14,17,18,19], #13
    1:                    [8,9,13,18,19], #14
       
    1:                    [10,11,16,20,21], #15
    1:                    [10,11,12,15,17,20,21,22], #16
    1:                    [11,12,13,16,18,21,22,23], #17
    1:                    [12,13,14,17,19,22,23,24], #18
    1:                    [13,14,18,23,24], #19
       
    1:                    [15,16,21], #20
    1:                    [15,16,17,20,22], #21
    1:                    [16,17,18,21,23], #22
    1:                    [17,18,19,22,24], #23
    1:                    [18,19,23]] #24
    1:     def is_empty(self,point):
6234438:         return not point in self.workers
       
    1:     def execute_move(self,move):
82074:         self.moves.append(move)
82074:         self.workers[move.who]=move.move
82074:         if(move.build == None ) :
    3:             self.winner = self.white_on_move
    3:             return
               
82071:         self.table[move.build]= self.table[move.build]+1
82071:         self.white_on_move = not self.white_on_move
82071:         if (len(self.possible_moves())==0):
   10:             self.winner = not self.white_on_move
       
    1:     def copyMe(self):
82074:         s = NewSant();
82074:         s.table =[]
82074:         s.workers=[]
2133924:         for k in self.table:
2051850:             s.table.append(k)
410370:         for k in self.workers:
328296:             s.workers.append(k)
82074:         s.white_on_move = self.white_on_move
82074:         s.winner = self.winner
1404047:         for k in self.moves:
1321973:             s.moves.append(k)
82074:         return s
           
    1:     def possible_walks(self,worker):
168197:         points =[]
168197:         worker_level = self.table[self.workers[worker]]
1309727:         for k in NewSant.cell_neighbors[self.workers[worker]]:
1141530:             if self.is_empty(k) and self.table[k] <= worker_level+1:
759555:                 points.append(k)
168197:         return points
       
    1:     def possible_builds(self,point,worker):
759542:         points=[]
5852450:         for k in NewSant.cell_neighbors[point]:
5092908:             if (self.is_empty(k) or k==self.workers[worker])  and self.table[k] < 4:
4093474:                 points.append(k)
759542:         return points
       
    1:     def possible_moves(self):
84101:         moves = []
84101:         k = 0
84101:         if(not self.white_on_move):
44736:             k = 2
252286:         for work in range(2):
927739:             for walk in self.possible_walks(work+k):
759554:                 if self.table[walk] == 3:
   12:                     moves = []
   12:                     moves.append(SantMove(work+k,walk,None))
   12:                     return moves             
4853016:                 for build in self.possible_builds(walk,work+k):
4093474:                     moves.append(SantMove(work+k,walk,build))
84089:         return moves
                   
           
    1:     def __init__(self):
82075:         self.moves = []
82075:         self.winner = None
82075:         self.workers =[None,None,None,None]
82075:         self.table = [0,0,0,0,0,
82075:                       0,0,0,0,0,
82075:                       0,0,0,0,0,
82075:                       0,0,0,0,0,
82075:                       0,0,0,0,0
               ]
82075:         self.white_on_move = False
           
               
               
    1:     def set_random_workers(self):
    1:         nums = []
    6:         while len(nums) < 4:
    5:             k = random.randint(0,24)
    5:             if not k in nums: 
    4:                 nums.append(k)
    1:         self.workers = nums
    1:     def __str__(self):
   75:         if self.white_on_move:
   37:             who='WHITE TO PLAY'
               else:
   38:             who='BLACK TO PLAY'
                   
   75:         output = '{} WF:{} WM:{} BF:{} BM:{}\n______________\n'.format(who,self.workers[0],self.workers[1],self.workers[2],self.workers[3])
  450:         for i in range(5):
  375:             line = ''
 2250:             for k in range(5):
 1875:                 line = line + str(self.table[i*5+k])
  375:             output = output + line +'\n'
   75:         if (self.winner != None):
    1:             if(self.winner == False):
    1:                 output = output + "Winner is Black"
                   else:
                       output = output + "Winner is White"
   75:         return output
       
       
    1: def play_random_game():    
           s = NewSant()
       
           s.set_random_workers()
       
           while(s.winner == None):
               move = random.choice(s.possible_moves())
               print(move)
               s.execute_move(move)
           print(s)
       
